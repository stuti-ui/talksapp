{"version":3,"sources":["firebase.js","SidebarChat.js","StateProvider.js","Sidebar.js","Chat.js","reducer.js","Login.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","SidebarChat","id","name","addNewChat","useState","seed","setSeed","messages","setMessages","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","Math","floor","random","onClick","roomName","prompt","add","className","to","Avatar","src","message","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Sidebar","rooms","setRooms","user","unsubscribe","photoURL","IconButton","DonutLarge","Chat","MoreVert","placeholder","type","input","setInput","roomId","useParams","setRoomName","Date","length","timestamp","toDate","toUTCString","SearchOutlined","AttachFile","displayName","InsertEmoticonOutlined","onChange","e","target","preventDefault","console","log","FieldValue","serverTimestamp","Mic","actionTypes","state","action","Login","dispatch","alt","Button","signInWithPopup","then","result","catch","error","alert","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e0a3903a.chunk.js","sourcesContent":["// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nimport firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDopH5579hFc-IrjeMzUR5uFJRr6VE4kME\",\r\n    authDomain: \"talksapp-9e67c.firebaseapp.com\",\r\n    projectId: \"talksapp-9e67c\",\r\n    storageBucket: \"talksapp-9e67c.appspot.com\",\r\n    messagingSenderId: \"178748544432\",\r\n    appId: \"1:178748544432:web:9963b38650933f1f5c3275\",\r\n    measurementId: \"G-CGZW4GTFT9\"\r\n  };\r\n\r\nconst firebaseapp= firebase.initializeApp(firebaseConfig);\r\n\r\nconst db = firebaseapp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport {auth, provider};\r\nexport default db;","import { Avatar } from '@material-ui/core'\r\nimport React, {useEffect, useState} from 'react'\r\nimport db from './firebase';\r\nimport './SidebarChat.css';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nfunction SidebarChat({id, name, addNewChat}) {\r\n    const[seed, setSeed]=useState('');\r\n    const [messages, setMessages] = useState([\"\"]);\r\n\r\n    useEffect(()=>{\r\n        if(id){\r\n            db.collection('rooms').doc(id).collection('messages').orderBy('timestamp','desc').onSnapshot(snapshot=>(\r\n                setMessages(snapshot.docs.map(doc => doc.data()))\r\n            ));\r\n        }\r\n    }, [id]);\r\n\r\n    useEffect(() => {\r\n        setSeed(Math.floor(\r\n            Math.random() * 5000\r\n        ))\r\n    }, []);\r\n    \r\n    const createChat= ()=>{\r\n        const roomName = prompt(\"Please enter name for the chat\");\r\n\r\n        if(roomName){\r\n            db.collection('rooms').add({\r\n                name : roomName\r\n            })\r\n        }\r\n    };\r\n    return !addNewChat ? (\r\n        <Link to={`/rooms/${id}`}>\r\n        <div className='sidebarChat'>\r\n            <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`}/>\r\n            <div className=\"sidebarChat_info\">\r\n                <h2>{name} </h2>\r\n                <p>{messages[0]?.message}</p>\r\n            </div>\r\n\r\n        </div>\r\n        </Link>\r\n    ):(\r\n        <div onClick={createChat}\r\n        className=\"sidebarChat\"><h2>Add new Chat</h2></div>\r\n    )\r\n}\r\n\r\nexport default SidebarChat\r\n","import React, {createContext, useContext, useReducer} from 'react';\r\n\r\nexport const StateContext = createContext();/*Creates data layer */\r\n\r\nexport const StateProvider = ({ reducer, initialState, children }) =>(\r\n\r\n<StateContext.Provider value ={useReducer(reducer, initialState)}>\r\n    {children}\r\n</StateContext.Provider>\r\n);\r\n\r\nexport const useStateValue = () => useContext(StateContext);\r\n","import { Avatar}  from '@material-ui/core';\r\nimport { Chat, DonutLarge, MoreVert} from '@material-ui/icons';\r\nimport {IconButton}  from '@material-ui/core';\r\nimport  SearchIcon  from '@material-ui/icons/Search';\r\nimport React, {useEffect, useState}  from 'react';\r\nimport './Sidebar.css';\r\nimport SidebarChat from './SidebarChat';\r\nimport db from './firebase.js'\r\nimport {useStateValue} from './StateProvider';\r\n\r\nfunction  Sidebar() {\r\n  const [rooms, setRooms]= useState([]);\r\n  const[{user}, dispatch] = useStateValue();\r\n\r\n  useEffect (()=>{\r\n    const unsubscribe= db.collection('rooms').onSnapshot((snapshot)=>\r\n      setRooms(snapshot.docs.map(doc=>\r\n        ({\r\n          id: doc.id,\r\n          data: doc.data(),\r\n        }))\r\n      )\r\n    );\r\n    return () =>{\r\n      unsubscribe();\r\n    }; \r\n  },[]);\r\n    return(\r\n        <div className=\"sidebar\">\r\n\r\n          <div className=\"sidebar_header\">\r\n            <Avatar src={user?.photoURL}/> {/* avatar from google */}\r\n            <div className=\"sidebar_headerRight\">\r\n            <IconButton>\r\n              <DonutLarge/>\r\n              </IconButton>\r\n              <IconButton>\r\n              <Chat/>\r\n              </IconButton>\r\n              <IconButton>\r\n              <MoreVert/>\r\n              </IconButton>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"sidebar_search\">\r\n              <div className=\"sidebar_searchContainer\">\r\n              <SearchIcon/>\r\n            <input placeholder=\"Search or start new chat\" type=\"text\"/>\r\n          </div>\r\n        </div>\r\n          <div className=\"sidebar_chats\">\r\n            <SidebarChat addNewChat/>\r\n            {rooms.map(rooms=>(\r\n              <SidebarChat key={rooms.id} id={rooms.id}\r\n              name={rooms.data.name}/>\r\n            ))}\r\n            \r\n          </div>\r\n\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default Sidebar;","import React, {useEffect, useState} from 'react'\r\nimport './Chat.css';\r\nimport {useParams} from \"react-router-dom\";\r\nimport {Avatar, IconButton} from '@material-ui/core';\r\nimport { AttachFile, SearchOutlined, MoreVert, InsertEmoticonOutlined, Mic} from '@material-ui/icons';\r\nimport db from './firebase.js'\r\nimport {useStateValue} from './StateProvider';\r\nimport firebase from 'firebase';\r\n\r\nfunction Chat() {\r\n    const [ input, setInput] = useState(\"\");\r\n    const [seed, setSeed]=useState('');\r\n    const {roomId} = useParams();\r\n    const [roomName, setRoomName] = useState(\"\");\r\n    const [messages, setMessages] = useState([\"\"]);\r\n    const [{user}, dispatch] = useStateValue();\r\n   \r\n    useEffect(() => {\r\n     if(roomId){\r\n        db.collection(\"rooms\").doc(roomId).onSnapshot((snapshot)=> setRoomName(snapshot.data().name));\r\n       \r\n        db.collection(\"rooms\").doc(roomId).collection(\"messages\").orderBy(\"timestamp\",\"asc\").onSnapshot(snapshot=>(\r\n            setMessages(snapshot.docs.map(doc => doc.data()))\r\n        ))\r\n    }\r\n\r\n    }, [roomId]) ; \r\n\r\n    useEffect(() => {\r\n        setSeed(Math.floor(Math.random() * 5000))\r\n    }, []);\r\n\r\n    const sendMessage = (e) =>{\r\n            e.preventDefault();\r\n            console.log('You typed>>',input);\r\n            db.collection(\"rooms\").doc(roomId).collection(\"messages\").add({\r\n                message: input,\r\n                name: user.displayName,\r\n                timestamp : firebase.firestore.FieldValue.serverTimestamp(),\r\n\r\n            });\r\n            setInput(\"\");\r\n\r\n\r\n    }\r\n    return (\r\n        <div className='chat'>\r\n            <div className='chat_header'>\r\n                <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`}/>\r\n                <div className='chat_headerInfo'>\r\n                    <h3>{roomName}</h3>\r\n                    <p>last seen {\" \"}\r\n                    {new Date(messages[messages.length-1]?.timestamp?.toDate()).toUTCString()}\r\n                    </p>\r\n                </div>\r\n                <div className=\"chat_headerRight\">\r\n                <IconButton>\r\n              <SearchOutlined/>\r\n              </IconButton>\r\n              <IconButton>\r\n              <AttachFile/>\r\n              </IconButton>\r\n              <IconButton>\r\n              <MoreVert/>\r\n              </IconButton>\r\n                </div>\r\n            \r\n            </div>\r\n            <div className=\"chat_body\">\r\n                {messages.map((message) => (\r\n                <p className={`chat_message ${message.name === user.displayName && \"chat_receiver\"}`}>\r\n                <span className=\"chat_name\">{message.name}</span>\r\n                    {message.message}\r\n                <span className=\"chat_timestamp\">\r\n                    {new Date(message.timestamp?.toDate()).toUTCString()}\r\n                </span>\r\n                </p>\r\n               ))}\r\n            </div>\r\n\r\n            <div className=\"chat_footer\">\r\n                <InsertEmoticonOutlined/>\r\n                <form>\r\n                    <input type=\"text\" value={input} onChange={e=> setInput(e.target.value)} placeholder=\"Type a message\"/>\r\n                        <button onClick={sendMessage} type=\"submit\"> Send a message </button>\r\n                </form>\r\n                <Mic/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","export const initialState={\r\n    user : null,\r\n}\r\n\r\nexport const actionTypes = {\r\n    SET_USER: \"SET_USER\",  /*action dispatch */\r\n};\r\n\r\nconst reducer = (state, action)=>{\r\n    console.log(action);\r\n    switch(action.type){\r\n        case actionTypes.SET_USER:\r\n            return{\r\n                ...state,\r\n                user: action.user,/* changes in data layer are returned */\r\n            };\r\n\r\n        default: \r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import React from 'react';\r\nimport {Button} from \"@material-ui/core\"; \r\nimport \"./login.css\";\r\nimport {auth, provider} from './firebase.js';\r\nimport {actionTypes} from './reducer';\r\nimport {useStateValue} from './StateProvider';\r\n\r\nfunction Login() {\r\n    const [{}, dispatch] = useStateValue();\r\n\r\n    const signIn=()=>{\r\n        auth.signInWithPopup(provider)\r\n        .then((result)=> {\r\n            dispatch({\r\n                type: actionTypes.SET_USER,\r\n                user: result.user,\r\n            });\r\n        })\r\n        .catch((error) => alert(error.message));\r\n    };\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"login_container\">\r\n            <img src=\"https://i.pinimg.com/originals/79/dc/31/79dc31280371b8ffbe56ec656418e122.png\" alt=\"\"/>\r\n            <div className=\"login_text\">\r\n                <h1>Sign in to Talksapp</h1>\r\n            </div>\r\n\r\n            <Button onClick={signIn}>\r\n                Sign in with Google\r\n            </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import {useState} from 'react';\r\nimport './App.css';\r\nimport Sidebar from './Sidebar';\r\nimport Chat from './Chat';\r\nimport Login from './Login';\r\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\r\nimport {useStateValue} from './StateProvider';\r\n\r\nfunction App() {\r\n  const [{user}, dispatch] = useStateValue();\r\n\r\n\r\n  return (\r\n    <div className=\"app\">\r\n       {!user ?(\r\n          <Login/>\r\n        ):(\r\n      <div className=\"app_body\">\r\n        <Router> \r\n            <Sidebar/>\r\n            <Switch>\r\n              <Route path={\"/rooms/:roomId\"}>\r\n          <Chat/>\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Chat/>\r\n          </Route>\r\n          </Switch>\r\n        </Router>\r\n      </div>\r\n  )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service '\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all '\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n            headers: {\r\n                'Service-Worker': 'script'\r\n            },\r\n        })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {StateProvider} from './StateProvider';\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport reducer, {initialState} from './reducer';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <StateProvider initialState= {initialState} reducer={reducer}> {/*stateprovider wrap data in acomponent and pushe to the data layer which we can pull afterwards*/}\r\n    <App />\r\n    </StateProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nserviceWorker.unregister();\r\nreportWebVitals();\r\n"],"sourceRoot":""}